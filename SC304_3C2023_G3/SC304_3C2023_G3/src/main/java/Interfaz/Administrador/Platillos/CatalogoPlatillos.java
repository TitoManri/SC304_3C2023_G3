/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaz.Administrador.Platillos;

import Catalogo.Nodos.NodoPlatillo;
import Catalogo.Platillo.Platillo;
import java.awt.HeadlessException;
import java.io.*;
import java.io.PrintWriter;
import javax.swing.JOptionPane;
import javax.swing.*;

/**
 *
 * @author manri
 */
public class CatalogoPlatillos extends javax.swing.JFrame {
    //Platillo Lista Enlazada Simple 
    private NodoPlatillo inicioPlatillo;
    private static final String RUTA_ARCHIVO = "src/main/java/BaseDeDatos/CatalogoPlatillos.txt";

    /**
     * Creates new form CatalogoPlatillos
     */
    public CatalogoPlatillos() {
        initComponents();
        buttonGroup1.add(sopasRadioButton);
        buttonGroup1.add(platosFuertesRadioButton);
        buttonGroup1.add(ensaladasRadioButton);
        buttonGroup1.add(entradasRadioButton);
        sopasRadioButton.setActionCommand("Sopas");
        ensaladasRadioButton.setActionCommand("Ensaladas");
        entradasRadioButton.setActionCommand("Entradas");
        platosFuertesRadioButton.setActionCommand("Platos Fuertes");
        if (inicioPlatillo == null) {
            cargarDesdeArchivo();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        sopasRadioButton = new javax.swing.JRadioButton();
        platosFuertesRadioButton = new javax.swing.JRadioButton();
        ensaladasRadioButton = new javax.swing.JRadioButton();
        entradasRadioButton = new javax.swing.JRadioButton();
        nombrePlatilloTexto = new javax.swing.JTextField();
        limpiar = new javax.swing.JButton();
        agregarPlatillo = new javax.swing.JButton();
        editarPlatillo = new javax.swing.JButton();
        volverPantallaPrincipal = new javax.swing.JButton();
        ingredientesPlatilloTexto = new javax.swing.JTextField();
        precioPlatillo = new javax.swing.JTextField();
        fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sopasRadioButton.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        sopasRadioButton.setForeground(new java.awt.Color(0, 0, 0));
        sopasRadioButton.setText("Sopas");
        sopasRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sopasRadioButtonActionPerformed(evt);
            }
        });
        getContentPane().add(sopasRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 380, -1, -1));

        platosFuertesRadioButton.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        platosFuertesRadioButton.setForeground(new java.awt.Color(0, 0, 0));
        platosFuertesRadioButton.setText("Platos Fuertes");
        platosFuertesRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                platosFuertesRadioButtonActionPerformed(evt);
            }
        });
        getContentPane().add(platosFuertesRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 380, -1, -1));

        ensaladasRadioButton.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        ensaladasRadioButton.setForeground(new java.awt.Color(0, 0, 0));
        ensaladasRadioButton.setText("Ensaladas");
        getContentPane().add(ensaladasRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, -1, -1));

        entradasRadioButton.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        entradasRadioButton.setForeground(new java.awt.Color(0, 0, 0));
        entradasRadioButton.setText("Entradas");
        entradasRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                entradasRadioButtonActionPerformed(evt);
            }
        });
        getContentPane().add(entradasRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 380, -1, -1));

        nombrePlatilloTexto.setBackground(new java.awt.Color(7, 0, 63));
        nombrePlatilloTexto.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        nombrePlatilloTexto.setForeground(new java.awt.Color(255, 255, 255));
        nombrePlatilloTexto.setBorder(null);
        getContentPane().add(nombrePlatilloTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 340, 20));

        limpiar.setBackground(new java.awt.Color(45, 62, 80));
        limpiar.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        limpiar.setText("Limpiar");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });
        getContentPane().add(limpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 490, 160, 40));

        agregarPlatillo.setBackground(new java.awt.Color(45, 62, 80));
        agregarPlatillo.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        agregarPlatillo.setText("Agregar Platillo");
        agregarPlatillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarPlatilloActionPerformed(evt);
            }
        });
        getContentPane().add(agregarPlatillo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 490, 160, 40));

        editarPlatillo.setBackground(new java.awt.Color(45, 62, 80));
        editarPlatillo.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        editarPlatillo.setText("Editar Platillo");
        getContentPane().add(editarPlatillo, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 550, 150, 40));

        volverPantallaPrincipal.setBackground(new java.awt.Color(45, 62, 80));
        volverPantallaPrincipal.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        volverPantallaPrincipal.setText("Volver a la pantalla principal");
        volverPantallaPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverPantallaPrincipalActionPerformed(evt);
            }
        });
        getContentPane().add(volverPantallaPrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 520, 300, 60));

        ingredientesPlatilloTexto.setBackground(new java.awt.Color(7, 0, 63));
        ingredientesPlatilloTexto.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        ingredientesPlatilloTexto.setForeground(new java.awt.Color(255, 255, 255));
        ingredientesPlatilloTexto.setBorder(null);
        getContentPane().add(ingredientesPlatilloTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 290, 340, -1));

        precioPlatillo.setBackground(new java.awt.Color(7, 0, 63));
        precioPlatillo.setForeground(new java.awt.Color(255, 255, 255));
        precioPlatillo.setBorder(null);
        getContentPane().add(precioPlatillo, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 430, 120, 30));

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AgregarYEditarPlatillos.png"))); // NOI18N
        fondo.setToolTipText("");
        getContentPane().add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sopasRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sopasRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sopasRadioButtonActionPerformed

    private void platosFuertesRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_platosFuertesRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_platosFuertesRadioButtonActionPerformed

    private void entradasRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_entradasRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_entradasRadioButtonActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_limpiarActionPerformed

    private void volverPantallaPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverPantallaPrincipalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_volverPantallaPrincipalActionPerformed

    private void agregarPlatilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarPlatilloActionPerformed


    ButtonModel botonesRadioButton = buttonGroup1.getSelection();
    if (botonesRadioButton == null) {
        JOptionPane.showMessageDialog(null, "Debe seleccionar una categor√≠a de platillo.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String nombrePlatillo = nombrePlatilloTexto.getText();
    String categoria = botonesRadioButton.getActionCommand();
    String precio = precioPlatillo.getText();
    String descripcion = ingredientesPlatilloTexto.getText(); // Obtener los ingredientes

    if (nombrePlatillo.isEmpty() || precio.isEmpty() || categoria.isEmpty() || descripcion.isEmpty()) {
        JOptionPane.showMessageDialog(null, "Alguno de los campos requeridos no fue completado.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
        @Override
        protected Void doInBackground() throws Exception {
            agregarPlatilloInBackground(nombrePlatillo, descripcion,categoria, precio);
            return null;
        }

        @Override
        protected void done() {
            // Realizar acciones adicionales despu√©s de agregar el platillo, if necessary
        }
    };

    worker.execute();
    }//GEN-LAST:event_agregarPlatilloActionPerformed

    
private void agregarPlatilloInBackground(String nombrePlatillo, String descripcion, String categoria, String precio) {
    try {
        Platillo platillo = new Platillo(nombrePlatillo, categoria, descripcion, precio);

        if (!platilloYaExiste(platillo.getNombre())) {
            agregarPlatillo(platillo);
            guardarEnArchivo(); // Guardar el platillo inmediatamente despu√©s de agregarlo
            System.out.println("Datos agregados exitosamente");
            JOptionPane.showMessageDialog(null, "Platillo agregado correctamente", "√âxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            mostrarError("El platillo ya existe en el cat√°logo.");
        }

    } catch (NumberFormatException e) {
        mostrarError("Error al convertir el precio a un n√∫mero.");
    } catch (HeadlessException e) {
        mostrarError("Error al agregar los datos: " + e.getMessage());
    }
}


    
    private boolean platilloYaExiste(String nombre) {
        NodoPlatillo aux = inicioPlatillo;
        while (aux != null) {
            if (aux.getPlatillo().getNombre().equalsIgnoreCase(nombre)) {
                return true; // The platillo already exists in the catalog
            }
            aux = aux.getSiguiente();
        }
        return false; // The platillo does not exist in the catalog
    }
    
private void guardarEnArchivo() {
    try (PrintWriter archivo = new PrintWriter(new FileWriter(RUTA_ARCHIVO))) {
        NodoPlatillo aux = inicioPlatillo;
        while (aux != null) {
            Platillo platillo = aux.getPlatillo();
            if (platillo != null) {
                archivo.println(formatoPlatillo(platillo));
            }
            aux = aux.getSiguiente();
        }
    } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Error al guardar en el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    
    private Platillo partesPlatillo(String linea) {
        String[] partes = linea.split(",");
        try {
            if (partes.length == 4) {
                String nombre = partes[0];
                String descripcion = partes[1];
                String categoria = partes[2];
                String precio = partes[3];

                return new Platillo(nombre, categoria, descripcion, precio); // Corrected parameter order
            } else {
                return null;
            }
        } catch (NumberFormatException e) {
            mostrarError("Error al convertir el precio a un n√∫mero.");
            return null;
        }
    }
    
private void cargarDesdeArchivo() {
    inicioPlatillo = null; // Limpiar la lista antes de cargar desde el archivo

    try (BufferedReader archivo = new BufferedReader(new FileReader(RUTA_ARCHIVO))) {
        System.out.println("Trying to load data from the file: " + RUTA_ARCHIVO);

        String linea;
        while ((linea = archivo.readLine()) != null) {
            Platillo platillo = partesPlatillo(linea);
            if (platillo != null) {
                agregarPlatillo(platillo);
            }
        }

        if (inicioPlatillo != null) {
            System.out.println("Datos cargados exitosamente");
        } else {
            System.out.println("El archivo estaba vac√≠o");
        }

    } catch (IOException e) {
        System.out.println("Error loading the file: " + e.getMessage());
        JOptionPane.showMessageDialog(null, "Error loading the file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}





    private String formatoPlatillo(Platillo platillo) {
    return platillo.getNombre() + "," + platillo.getDescripcion() + "," + platillo.getCategoria() + "," + platillo.getPrecio();
}
    
    public boolean esVaciaPlatillos(){
        return inicioPlatillo==null;
   }

  
    private void mostrarError(String mensaje) {
    // Implementaci√≥n para mostrar errores, por ejemplo, usando JOptionPane
    JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
}
    
private void agregarPlatillo(Platillo platillo) {
    try {
        if (!platilloYaExiste(platillo.getNombre())) {
            NodoPlatillo nuevoNodo = new NodoPlatillo();
            nuevoNodo.setPlatillo(platillo);

            if (inicioPlatillo == null) {
                inicioPlatillo = nuevoNodo;
            } else {
                NodoPlatillo aux = inicioPlatillo;
                while (aux.getSiguiente() != null) {
                    aux = aux.getSiguiente();
                }
                aux.setSiguiente(nuevoNodo);
            }
        } else {
            mostrarError("El platillo ya existe en el cat√°logo.");
        }

    } catch (NumberFormatException e) {
        mostrarError("Error al convertir el precio a un n√∫mero.");
    } catch (HeadlessException e) {
        mostrarError("Error al agregar los datos: " + e.getMessage());
    }
}


    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CatalogoPlatillos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CatalogoPlatillos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CatalogoPlatillos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CatalogoPlatillos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
        public void run() {
            new CatalogoPlatillos().setVisible(true);
        }
    });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarPlatillo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton editarPlatillo;
    private javax.swing.JRadioButton ensaladasRadioButton;
    private javax.swing.JRadioButton entradasRadioButton;
    private javax.swing.JLabel fondo;
    private javax.swing.JTextField ingredientesPlatilloTexto;
    private javax.swing.JButton limpiar;
    private javax.swing.JTextField nombrePlatilloTexto;
    private javax.swing.JRadioButton platosFuertesRadioButton;
    private javax.swing.JTextField precioPlatillo;
    private javax.swing.JRadioButton sopasRadioButton;
    private javax.swing.JButton volverPantallaPrincipal;
    // End of variables declaration//GEN-END:variables
}
