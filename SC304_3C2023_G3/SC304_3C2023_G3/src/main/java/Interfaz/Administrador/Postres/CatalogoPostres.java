/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaz.Administrador.Postres;

import Catalogo.Nodos.NodoPostre;
import Catalogo.Postres.Postre;
import Interfaz.Administrador.PaginaInicio;
import java.awt.*;
import java.io.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;

/**
 *Clase CatalogoPostres: sirve para guardar toda la informacion nueva sobre un postres que quiera implementar el administrador 
 */
public class CatalogoPostres extends javax.swing.JFrame {
    
    //Postres Doble Lista Enlazada
    NodoPostre inicioPostre;
    NodoPostre finPostre;
    
    private static final String ruta = "SC304_3C2023_G3/src/main/java/BaseDeDatos/CatalogoPostres.txt";
    String RUTA_ARCHIVO_POSTRES = System.getProperty("user.dir") + "/" + ruta; 
    public CatalogoPostres() {
        initComponents();
        llenarTabla();
        cargarDesdeArchivo();
        buttonGroup1.add(dulceRadioButton);
        buttonGroup1.add(saladoRadioButton);
        dulceRadioButton.setActionCommand("Dulce");
        saladoRadioButton.setActionCommand("Salado");
        

    }

    public NodoPostre getInicioPostre() {
        return inicioPostre;
    }
    
    public boolean esVaciaPostres(){
        return inicioPostre == null;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        dulceRadioButton = new javax.swing.JRadioButton();
        saladoRadioButton = new javax.swing.JRadioButton();
        nombrePostreTexto = new javax.swing.JTextField();
        limpiar = new javax.swing.JButton();
        agregarPostre = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        editarPostre = new javax.swing.JButton();
        volverPantallaPrincipal = new javax.swing.JButton();
        ingredientesPostreTexto = new javax.swing.JTextField();
        precioPostre = new javax.swing.JTextField();
        fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dulceRadioButton.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        dulceRadioButton.setForeground(new java.awt.Color(0, 0, 0));
        dulceRadioButton.setText("Dulce");
        dulceRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dulceRadioButtonActionPerformed(evt);
            }
        });
        getContentPane().add(dulceRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 380, -1, -1));

        saladoRadioButton.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        saladoRadioButton.setForeground(new java.awt.Color(0, 0, 0));
        saladoRadioButton.setText("Salado");
        getContentPane().add(saladoRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, -1, -1));

        nombrePostreTexto.setBackground(new java.awt.Color(7, 0, 63));
        nombrePostreTexto.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        nombrePostreTexto.setForeground(new java.awt.Color(255, 255, 255));
        nombrePostreTexto.setBorder(null);
        nombrePostreTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombrePostreTextoActionPerformed(evt);
            }
        });
        getContentPane().add(nombrePostreTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 340, 20));

        limpiar.setBackground(new java.awt.Color(7, 0, 63));
        limpiar.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        limpiar.setForeground(new java.awt.Color(255, 255, 255));
        limpiar.setText("Limpiar");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });
        getContentPane().add(limpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 490, 160, 40));

        agregarPostre.setBackground(new java.awt.Color(7, 0, 63));
        agregarPostre.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        agregarPostre.setForeground(new java.awt.Color(255, 255, 255));
        agregarPostre.setText("Agregar Postre");
        agregarPostre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarPostreActionPerformed(evt);
            }
        });
        getContentPane().add(agregarPostre, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 490, 160, 40));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Nombres", "Ingredientes", "Categorias", "Precios"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tabla);
        if (tabla.getColumnModel().getColumnCount() > 0) {
            tabla.getColumnModel().getColumn(0).setResizable(false);
            tabla.getColumnModel().getColumn(1).setResizable(false);
            tabla.getColumnModel().getColumn(2).setResizable(false);
            tabla.getColumnModel().getColumn(3).setResizable(false);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 100, 430, 400));

        editarPostre.setBackground(new java.awt.Color(7, 0, 63));
        editarPostre.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        editarPostre.setForeground(new java.awt.Color(255, 255, 255));
        editarPostre.setText("Editar Postre");
        editarPostre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarPostreActionPerformed(evt);
            }
        });
        getContentPane().add(editarPostre, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 540, 150, 40));

        volverPantallaPrincipal.setBackground(new java.awt.Color(7, 0, 63));
        volverPantallaPrincipal.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        volverPantallaPrincipal.setForeground(new java.awt.Color(255, 255, 255));
        volverPantallaPrincipal.setText("Volver a la pantalla principal");
        volverPantallaPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverPantallaPrincipalActionPerformed(evt);
            }
        });
        getContentPane().add(volverPantallaPrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(640, 530, 300, 40));

        ingredientesPostreTexto.setBackground(new java.awt.Color(7, 0, 63));
        ingredientesPostreTexto.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        ingredientesPostreTexto.setForeground(new java.awt.Color(255, 255, 255));
        ingredientesPostreTexto.setBorder(null);
        ingredientesPostreTexto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ingredientesPostreTextoActionPerformed(evt);
            }
        });
        getContentPane().add(ingredientesPostreTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 288, 340, 20));

        precioPostre.setBackground(new java.awt.Color(7, 0, 63));
        precioPostre.setForeground(new java.awt.Color(255, 255, 255));
        precioPostre.setBorder(null);
        precioPostre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                precioPostreActionPerformed(evt);
            }
        });
        getContentPane().add(precioPostre, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 420, 120, 30));

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AgregarYEditarPostres.png"))); // NOI18N
        getContentPane().add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dulceRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dulceRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dulceRadioButtonActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        nombrePostreTexto.setText("");
        ingredientesPostreTexto.setText("");
        precioPostre.setText("");
    }//GEN-LAST:event_limpiarActionPerformed

    private void volverPantallaPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverPantallaPrincipalActionPerformed
        PaginaInicio x = new PaginaInicio();
        x.setVisible(true);
        x.pack();
        x.setLocationRelativeTo(null); 
        this.dispose();
    }//GEN-LAST:event_volverPantallaPrincipalActionPerformed

    //Metodos Iniciales 
    
    private void cargarDesdeArchivo() {
    try (BufferedReader archivo = new BufferedReader(new FileReader(RUTA_ARCHIVO_POSTRES))) {
        String linea;
        while ((linea = archivo.readLine()) != null) {
            Postre postre = partesPostre(linea);
            if (postre != null && !postreYaExiste(postre.getNombre())) {
                finPostre = agregarNodo(finPostre, postre);
                if (inicioPostre == null) {
                    inicioPostre = finPostre;
                }
            }
        }

        if (finPostre != null) {
            llenarTabla();
        }

    } catch (IOException e) {
        JOptionPane.showMessageDialog(null, "Error al cargar el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
    }
}
    private void llenarTabla() {
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();
        model.setRowCount(0);

        if (inicioPostre != null) {
            NodoPostre aux = inicioPostre;

            do {
                Postre postre = aux.getPostre();
                if (postre != null) {
                    String nombrePostre = postre.getNombre();

                    if (!existeNombreEnTabla(model, nombrePostre)) {
                        model.addRow(new Object[]{postre.getNombre(), postre.getCategoria(), postre.getDescripcion(), postre.getPrecio()});
                    }
                }
                aux = aux.getSiguiente();
            } while (aux != inicioPostre);
        }
    }
    private boolean existeNombreEnTabla(DefaultTableModel model, String nombre) {
        int rowCount = model.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            if (model.getValueAt(i, 0).equals(nombre)) {
                return true;
            }
        }
        return false;
    }

    //Metodos para Agregar
    
    private void agregarPostreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarPostreActionPerformed
    ButtonModel botonesRadioButton = buttonGroup1.getSelection();
    if (botonesRadioButton == null) {
        JOptionPane.showMessageDialog(null, "Debe seleccionar una categoría de postre.", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }

    String nombrePostre = nombrePostreTexto.getText();
    String descripcion = ingredientesPostreTexto.getText();
    String categoria = botonesRadioButton.getActionCommand();
    String precio = precioPostre.getText();


    SwingWorker<Void, Void> worker = new SwingWorker<Void, Void>() {
        @Override
        protected Void doInBackground() throws Exception {
            agregarPostreInBackground(nombrePostre, descripcion, categoria, precio);
            return null;
        }

        @Override
        protected void done() {

        }
    };

    worker.execute();
    }//GEN-LAST:event_agregarPostreActionPerformed

    
private void agregarPostreInBackground(String nombrePostre, String descripcion, String categoria, String precio) {
    try {
        if (nombrePostre.isEmpty() || categoria.isEmpty() || precio.isEmpty()) {
            mostrarError("Alguno de los campos requeridos no fue completado.");
            return;
        }

        if (postreYaExiste(nombrePostre)) {
            mostrarError("Ya existe un postre con el mismo nombre.");
            return;
        }

        Postre postre = new Postre(nombrePostre, descripcion, categoria, precio);
        NodoPostre nuevoNodo = new NodoPostre();
        nuevoNodo.setPostre(postre);

        if (finPostre == null) {
            finPostre = nuevoNodo;
            inicioPostre = nuevoNodo;
        } else {
            nuevoNodo.setSiguiente(finPostre.getSiguiente());
            finPostre.setSiguiente(nuevoNodo);
            finPostre = nuevoNodo;
        }

        finPostre = agregarNodo(finPostre, postre);

        try (PrintWriter archivo = new PrintWriter(new FileWriter(RUTA_ARCHIVO_POSTRES, true))) {
            archivo.println(formatoPostre(postre));
        } catch (IOException e) {
            mostrarError("Error al guardar en el archivo: " + e.getMessage());
        }

        guardarListaEnArchivo(inicioPostre);
        llenarTabla();
        nombrePostreTexto.setText("");
        ingredientesPostreTexto.setText("");
        precioPostre.setText("");
        JOptionPane.showMessageDialog(null, "Postre agregado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);

    } catch (NumberFormatException e) {
        mostrarError("Error al convertir el precio a un número.");
    } catch (HeadlessException e) {
        mostrarError("Error al agregar los datos: " + e.getMessage());
    }
}
    private boolean postreYaExiste(String nombre) {
        NodoPostre aux = inicioPostre;
        while (aux != finPostre) {
            if (aux.getPostre().getNombre().equalsIgnoreCase(nombre)) {
                return true; 
            }
            aux = aux.getSiguiente();
        }

        return finPostre != null && finPostre.getPostre().getNombre().equalsIgnoreCase(nombre);
    } 
    
    private NodoPostre agregarNodo(NodoPostre fin, Postre postre) {
        NodoPostre nuevoNodo = new NodoPostre();
        nuevoNodo.setPostre(postre);

        if (fin == null) {
            fin = nuevoNodo;
            nuevoNodo.setSiguiente(nuevoNodo);
        } else {
            nuevoNodo.setSiguiente(fin.getSiguiente());
            fin.setSiguiente(nuevoNodo);
            fin = nuevoNodo;
        }

        return fin;
    }
    
    //Metodos para Editar
    
    private void editarPostreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarPostreActionPerformed
    String nuevoNombre = JOptionPane.showInputDialog(this, "Ingrese el nuevo nombre para el postre:", nombrePostreTexto.getText().trim());
    
    if (nuevoNombre != null && !nuevoNombre.isEmpty()) {
        NodoPostre nodo = buscarPostre(nombrePostreTexto.getText().trim());
        
        if (nodo != null) {
            Postre postreActual = nodo.getPostre();

            String nuevaDescripcion = JOptionPane.showInputDialog(this, "Nueva descripción del postre:", postreActual.getDescripcion());
            String nuevaCategoria = JOptionPane.showInputDialog(this, "Nueva categoría del postre:", postreActual.getCategoria());
            String nuevoPrecio = JOptionPane.showInputDialog(this, "Nuevo precio del postre:", postreActual.getPrecio());

            if (nuevaDescripcion != null && nuevaCategoria != null && nuevoPrecio != null) {
                Postre nuevoPostre = new Postre(nuevoNombre, nuevaCategoria, nuevaDescripcion, nuevoPrecio);

                nodo.setPostre(nuevoPostre);

                guardarListaEnArchivo(inicioPostre); 
                llenarTabla();

                mostrarMensaje("Postre editado correctamente.");
            } else {
                mostrarMensaje("No se realizaron cambios en el postre.");
            }
        } else {
            mostrarError("No se encontró el postre con el nombre proporcionado.");
        }
    }
    }//GEN-LAST:event_editarPostreActionPerformed

    private void nombrePostreTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombrePostreTextoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nombrePostreTextoActionPerformed

    private void ingredientesPostreTextoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ingredientesPostreTextoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ingredientesPostreTextoActionPerformed

    private void precioPostreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_precioPostreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_precioPostreActionPerformed
   
    public NodoPostre buscarPostre(String nombre) {
        NodoPostre aux = inicioPostre;

        while (aux != finPostre) {
            if (aux.getPostre().getNombre().equalsIgnoreCase(nombre)) {
                System.out.println("Postre encontrado: " + aux.getPostre().getNombre());
                return aux;
            }
            aux = aux.getSiguiente();
        }

        if (finPostre != null && finPostre.getPostre().getNombre().equalsIgnoreCase(nombre)) {
            System.out.println("Postre encontrado: " + finPostre.getPostre().getNombre());
            return finPostre;
        }

        System.out.println("Postre no encontrado");
        return null;
    }
    

    
    //Metodos para guardar en el Archivo
    
    private void guardarListaEnArchivo(NodoPostre inicio) {
    String[] nombresGuardados = new String[100]; 

    PrintWriter archivo = null;
    int index = 0;

    try {
        archivo = new PrintWriter(new FileWriter(RUTA_ARCHIVO_POSTRES));

        NodoPostre aux = inicio;
        do {
            Postre postre = aux.getPostre();
            if (postre != null) {
                String nombrePostre = postre.getNombre();

                
                if (!contieneNombre(nombresGuardados, index, nombrePostre)) {
                    archivo.println(formatoPostre(postre));
                    nombresGuardados[index++] = nombrePostre;
                }
            } else {
            }
            aux = aux.getSiguiente();
        } while (aux != inicio);
    } catch (IOException e) {
        mostrarError("Error al guardar en el archivo: " + e.getMessage());
    } finally {
        if (archivo != null) {
            archivo.close();
        }
    }
}
    
    private boolean contieneNombre(String[] nombres, int index, String nombre) {
    for (int i = 0; i < index; i++) {
        if (nombre.equals(nombres[i])) {
            return true; 
        }
    }
    return false;
}



    //Metodos para el Archivo


    private Postre partesPostre(String linea) {
        String[] partes = linea.split(",");
        try {
            if (partes.length == 4) {
                String nombre = partes[0];
                String descripcion = partes[1];
                String tipo = partes[2];
                String precio = partes[3];

                return new Postre(nombre, tipo, descripcion, precio); // Orden de parámetros corregido
            } else {
                System.out.println("Error en el formato de línea: " + linea);
                return null;
            }
        } catch (NumberFormatException e) {
            System.out.println("Error al convertir el precio a un número.");
            return null;
        }
    }

    private String formatoPostre(Postre postre) {
        return postre.getNombre() + "," + postre.getDescripcion() + "," + postre.getCategoria() + "," + postre.getPrecio();
    }

    //Metodos para Errores y Mensajes
    
    private void mostrarMensaje(String mensaje) {
        JOptionPane.showMessageDialog(null, mensaje, "Mensaje", JOptionPane.INFORMATION_MESSAGE);
    }
    private void mostrarError(String mensaje) {
        JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }







    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CatalogoPostres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CatalogoPostres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CatalogoPostres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CatalogoPostres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CatalogoPostres().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarPostre;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton dulceRadioButton;
    private javax.swing.JButton editarPostre;
    private javax.swing.JLabel fondo;
    private javax.swing.JTextField ingredientesPostreTexto;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton limpiar;
    private javax.swing.JTextField nombrePostreTexto;
    private javax.swing.JTextField precioPostre;
    private javax.swing.JRadioButton saladoRadioButton;
    private javax.swing.JTable tabla;
    private javax.swing.JButton volverPantallaPrincipal;
    // End of variables declaration//GEN-END:variables
}
