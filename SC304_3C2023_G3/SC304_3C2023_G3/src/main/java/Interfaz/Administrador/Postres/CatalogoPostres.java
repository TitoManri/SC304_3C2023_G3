/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Interfaz.Administrador.Postres;

import Catalogo.Nodos.NodoPostre;
import Catalogo.Postres.Postre;
import java.awt.*;
import java.io.*;
import javax.swing.ButtonModel;
import javax.swing.JOptionPane;

/**
 *
 * @author manri
 */
public class CatalogoPostres extends javax.swing.JFrame {

    /**
     * Creates new form CatalogoPostres
     */
    
    //Postres Doble Lista Enlazada
    NodoPostre inicioPostre;
    NodoPostre finPostre;
    
    private static final String ruta = "SC304_3C2023_G3/src/main/java/BaseDeDatos/CatalogoPostres.txt";
    String RUTA_ARCHIVO = System.getProperty("user.dir") + "/" + ruta; 
    public CatalogoPostres() {
        initComponents();
        cargarDesdeArchivo();
        buttonGroup1.add(dulceRadioButton);
        buttonGroup1.add(saladoRadioButton);
        dulceRadioButton.setActionCommand("Dulce");
        saladoRadioButton.setActionCommand("Salado");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        dulceRadioButton = new javax.swing.JRadioButton();
        saladoRadioButton = new javax.swing.JRadioButton();
        nombrePostreTexto = new javax.swing.JTextField();
        limpiar = new javax.swing.JButton();
        agregarPostre = new javax.swing.JButton();
        editarPostre = new javax.swing.JButton();
        volverPantallaPrincipal = new javax.swing.JButton();
        ingredientesPostreTexto = new javax.swing.JTextField();
        precioPostre = new javax.swing.JTextField();
        fondo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        dulceRadioButton.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        dulceRadioButton.setForeground(new java.awt.Color(0, 0, 0));
        dulceRadioButton.setText("Dulce");
        dulceRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dulceRadioButtonActionPerformed(evt);
            }
        });
        getContentPane().add(dulceRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 380, -1, -1));

        saladoRadioButton.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        saladoRadioButton.setForeground(new java.awt.Color(0, 0, 0));
        saladoRadioButton.setText("Salado");
        getContentPane().add(saladoRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 380, -1, -1));

        nombrePostreTexto.setBackground(new java.awt.Color(7, 0, 63));
        nombrePostreTexto.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        nombrePostreTexto.setForeground(new java.awt.Color(255, 255, 255));
        nombrePostreTexto.setBorder(null);
        getContentPane().add(nombrePostreTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 200, 340, 20));

        limpiar.setBackground(new java.awt.Color(45, 62, 80));
        limpiar.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        limpiar.setText("Limpiar");
        limpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                limpiarActionPerformed(evt);
            }
        });
        getContentPane().add(limpiar, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 490, 160, 40));

        agregarPostre.setBackground(new java.awt.Color(45, 62, 80));
        agregarPostre.setFont(new java.awt.Font("Helvetica Neue", 1, 16)); // NOI18N
        agregarPostre.setText("Agregar Postre");
        agregarPostre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarPostreActionPerformed(evt);
            }
        });
        getContentPane().add(agregarPostre, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 490, 160, 40));

        editarPostre.setBackground(new java.awt.Color(45, 62, 80));
        editarPostre.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        editarPostre.setText("Editar Postre");
        editarPostre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarPostreActionPerformed(evt);
            }
        });
        getContentPane().add(editarPostre, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 540, 150, 40));

        volverPantallaPrincipal.setBackground(new java.awt.Color(45, 62, 80));
        volverPantallaPrincipal.setFont(new java.awt.Font("Helvetica Neue", 1, 18)); // NOI18N
        volverPantallaPrincipal.setText("Volver a la pantalla principal");
        volverPantallaPrincipal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volverPantallaPrincipalActionPerformed(evt);
            }
        });
        getContentPane().add(volverPantallaPrincipal, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 510, 300, 60));

        ingredientesPostreTexto.setBackground(new java.awt.Color(7, 0, 63));
        ingredientesPostreTexto.setFont(new java.awt.Font("Helvetica Neue", 0, 14)); // NOI18N
        ingredientesPostreTexto.setForeground(new java.awt.Color(255, 255, 255));
        ingredientesPostreTexto.setBorder(null);
        getContentPane().add(ingredientesPostreTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 288, 340, 20));

        precioPostre.setBackground(new java.awt.Color(7, 0, 63));
        precioPostre.setForeground(new java.awt.Color(255, 255, 255));
        precioPostre.setBorder(null);
        getContentPane().add(precioPostre, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 420, 120, 30));

        fondo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/AgregarYEditarPostres.png"))); // NOI18N
        getContentPane().add(fondo, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void dulceRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dulceRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_dulceRadioButtonActionPerformed

    private void limpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_limpiarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_limpiarActionPerformed

    private void volverPantallaPrincipalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volverPantallaPrincipalActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_volverPantallaPrincipalActionPerformed

    private void agregarPostreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarPostreActionPerformed
        ButtonModel botonesRadioButton = buttonGroup1.getSelection();
        if (botonesRadioButton == null) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar una categoría de platillo.", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        String nombre = nombrePostreTexto.getText().trim();
        String descripcion = ingredientesPostreTexto.getText().trim();
        String tipo = botonesRadioButton.getActionCommand();
        String precio = precioPostre.getText().trim();

        if (!nombre.isEmpty() && !descripcion.isEmpty() && !precio.isEmpty()) {
            agregarPostreInBackground(nombre, descripcion, tipo, precio);
        } else {
            mostrarError("Completa todos los campos antes de agregar un postre.");
        }
    }//GEN-LAST:event_agregarPostreActionPerformed

    private void editarPostreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarPostreActionPerformed
String nuevoNombre = JOptionPane.showInputDialog(this, "Ingrese el nuevo nombre para el postre:", nombrePostreTexto.getText().trim());
    
    if (nuevoNombre != null && !nuevoNombre.isEmpty()) {
        NodoPostre nodo = buscarPostre(nombrePostreTexto.getText().trim());
        
        if (nodo != null) {
            Postre postreActual = nodo.getPostre();

            String nuevaDescripcion = JOptionPane.showInputDialog(this, "Nueva descripción del postre:", postreActual.getDescripcion());
            String nuevaCategoria = JOptionPane.showInputDialog(this, "Nueva categoría del postre:", postreActual.getCategoria());
            String nuevoPrecio = JOptionPane.showInputDialog(this, "Nuevo precio del postre:", postreActual.getPrecio());

            if (nuevaDescripcion != null && nuevaCategoria != null && nuevoPrecio != null) {
                Postre nuevoPostre = new Postre(nuevoNombre, nuevaCategoria, nuevaDescripcion, nuevoPrecio);

                nodo.setPostre(nuevoPostre);

                guardarEnArchivo(); 

                mostrarMensaje("Postre editado correctamente.");
            } else {
                mostrarMensaje("No se realizaron cambios en el postre.");
            }
        } else {
            mostrarError("No se encontró el postre con el nombre proporcionado.");
        }
    }
    }//GEN-LAST:event_editarPostreActionPerformed

    /**
     * @return 
     */
    
    public NodoPostre buscarPostre(String nombre) {
        NodoPostre aux = inicioPostre;

        while (aux != finPostre) {
            if (aux.getPostre().getNombre().equalsIgnoreCase(nombre)) {
                System.out.println("Postre encontrado: " + aux.getPostre().getNombre());
                return aux;
            }
            aux = aux.getSiguiente();
        }

        if (finPostre != null && finPostre.getPostre().getNombre().equalsIgnoreCase(nombre)) {
            System.out.println("Postre encontrado: " + finPostre.getPostre().getNombre());
            return finPostre;
        }

        System.out.println("Postre no encontrado");
        return null;
    }
    
    private void agregarPostreInBackground(String nombrePostre, String descripcion, String tipo, String precio) {
    try {
        Postre postre = new Postre(nombrePostre, tipo, descripcion, precio);

        if (!postreYaExiste(postre.getNombre())) {
            agregarPostre(postre);
            guardarEnArchivo(); // Guardar el postre inmediatamente después de agregarlo
            System.out.println("Datos agregados exitosamente");
            JOptionPane.showMessageDialog(null, "Postre agregado correctamente", "Éxito", JOptionPane.INFORMATION_MESSAGE);
        } else {
            mostrarError("El postre ya existe en el catálogo.");
        }

    } catch (NumberFormatException e) {
        mostrarError("Error al convertir el precio a un número.");
    } catch (HeadlessException e) {
        mostrarError("Error al agregar los datos: " + e.getMessage());
    }
}

    private void agregarPostre(Postre postre) {
        try {
            if (!postreYaExiste(postre.getNombre())) {
                NodoPostre nuevoNodo = new NodoPostre();
                nuevoNodo.setPostre(postre);

                if (inicioPostre == null) {
                    inicioPostre = finPostre = nuevoNodo;
                    inicioPostre.setSiguiente(finPostre);
                    finPostre.setAnterior(inicioPostre);
                } else {
                    finPostre.setSiguiente(nuevoNodo);
                    nuevoNodo.setAnterior(finPostre);
                    finPostre = nuevoNodo;
                    finPostre.setSiguiente(inicioPostre);
                    inicioPostre.setAnterior(finPostre);
                }

                guardarEnArchivo(); // Asegúrate de guardar la lista actualizada en el archivo
            } else {
                mostrarError("El postre ya existe en el catálogo.");
            }

        } catch (NumberFormatException e) {
            mostrarError("Error al convertir el precio a un número.");
        } catch (HeadlessException e) {
            mostrarError("Error al agregar los datos: " + e.getMessage());
        }
    }

    private boolean postreYaExiste(String nombre) {
        NodoPostre aux = inicioPostre;
        while (aux != finPostre) {
            if (aux.getPostre().getNombre().equalsIgnoreCase(nombre)) {
                return true; 
            }
            aux = aux.getSiguiente();
        }

        return finPostre != null && finPostre.getPostre().getNombre().equalsIgnoreCase(nombre);
    }

    private void guardarEnArchivo() {
        try (PrintWriter archivo = new PrintWriter(new FileWriter(RUTA_ARCHIVO))) {
            NodoPostre aux = inicioPostre;
            do {
                Postre postre = aux.getPostre();
                if (postre != null) {
                    archivo.println(formatoPostre(postre));
                }
                aux = aux.getSiguiente();
            } while (aux != finPostre);

        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al guardar en el archivo: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private Postre partesPostre(String linea) {
        String[] partes = linea.split(",");
        try {
            if (partes.length == 4) {
                String nombre = partes[0];
                String descripcion = partes[1];
                String tipo = partes[2];
                String precio = partes[3];

                return new Postre(nombre, tipo, descripcion, precio); // Orden de parámetros corregido
            } else {
                System.out.println("Error en el formato de línea: " + linea);
                return null;
            }
        } catch (NumberFormatException e) {
            System.out.println("Error al convertir el precio a un número.");
            return null;
        }
    }


    private void cargarDesdeArchivo() {
        try (BufferedReader archivo = new BufferedReader(new FileReader(RUTA_ARCHIVO))) {
            System.out.println("Intentando cargar datos desde el archivo: " + RUTA_ARCHIVO);

            // Limpiar la lista antes de cargar nuevos datos
            inicioPostre = null;
            finPostre = null;

            String linea;
            while ((linea = archivo.readLine()) != null) {
                Postre postre = partesPostre(linea);
                if (postre != null) {
                    finPostre = agregarNodo(finPostre, postre);
                    if (inicioPostre == null) {
                        inicioPostre = finPostre;
                    }
                } else {
                    System.out.println("Error al procesar la línea: " + linea);
                }
            }

            // Verificar si la lista está vacía después de cargar datos
            if (finPostre != null) {
                // Realizar acciones adicionales si es necesario
            }

        } catch (IOException e) {
            System.out.println("Error al cargar el archivo: " + e.getMessage());
        }
    }


    private NodoPostre agregarNodo(NodoPostre fin, Postre postre) {
        NodoPostre nuevoNodo = new NodoPostre();
        nuevoNodo.setPostre(postre);

        if (fin == null) {
            fin = nuevoNodo;
            nuevoNodo.setSiguiente(nuevoNodo);
        } else {
            nuevoNodo.setSiguiente(fin.getSiguiente());
            fin.setSiguiente(nuevoNodo);
            fin = nuevoNodo;
        }

        return fin;
    }
    
    private void mostrarMensaje(String mensaje) {
        JOptionPane.showMessageDialog(null, mensaje, "Mensaje", JOptionPane.INFORMATION_MESSAGE);
    }
    private void mostrarError(String mensaje) {
    // Implementación para mostrar errores, por ejemplo, usando JOptionPane
    JOptionPane.showMessageDialog(this, mensaje, "Error", JOptionPane.ERROR_MESSAGE);
    }
    private String formatoPostre(Postre postre) {
    return postre.getNombre() + "," + postre.getDescripcion() + "," + postre.getCategoria() + "," + postre.getPrecio();
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CatalogoPostres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CatalogoPostres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CatalogoPostres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CatalogoPostres.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CatalogoPostres().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarPostre;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JRadioButton dulceRadioButton;
    private javax.swing.JButton editarPostre;
    private javax.swing.JLabel fondo;
    private javax.swing.JTextField ingredientesPostreTexto;
    private javax.swing.JButton limpiar;
    private javax.swing.JTextField nombrePostreTexto;
    private javax.swing.JTextField precioPostre;
    private javax.swing.JRadioButton saladoRadioButton;
    private javax.swing.JButton volverPantallaPrincipal;
    // End of variables declaration//GEN-END:variables
}
